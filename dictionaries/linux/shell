*shell*
#!/bin/bash
# This is a commment
VAR="variable names are uppercase by convention" # Dont put spaces before or after '=' when initializing a variable
echo $VAR
echo "Process Id (PID) of current shell: $$"
echo "Filename of current script: $0"
echo "Exit status of the last executed command: $?"
echo "List of arguments the script was invoked with:"
# $# is the number of arguments given to the script
# $* is all the arguments given to the script
# For loops are foreach loops, use while/until loops otherwise
for TOKEN in $*
do
    echo "$TOKEN"
done
# arrays:
# MYARRAY[0] = ""
# all values in an array ${MYARRAY[*]}
# size of an array ${#MYARRAY[@]}
# Put spaces between operators and operands
# Anything in backticks is executed as a command
echo "\`expr 1 + 2\` = `expr 1 + 2`"
if [ $1 -lt 3 ]
then
    echo "argument1 -lt 3"
elif [ $1 == 3 ]
then 
    echo "argument1 == 3"
elif [ $1 -gt 3 ]
then
    echo "argument1 -gt 3"
fi
# Relational operators: -eq, -ne, -gt, -lt, -ge, -le
# Boolean operators !, -o, -a
# Operators must be placed in brackets with space between brackets and operands
# break and continue are available
NUM=0
while [ $NUM -le 10 ]
do
    echo $NUM
    NUM=`expr $NUM + 1`
done
<command1> | <command2>         transfers STDOUT of command1 to STDIN of command2 *|* *pipe*
<command> > <file>              output to a file and overwrite *>* *>>*
<command> >> <file>             append to a file

Shortcuts:
ctrl + l                                        *clear* terminal
ctrl + z                                        puts running program in the background use fg to bring it back
ctrl + a                                        brings cursor to begining of prompt
ctrl + e                                        brings cursor to end of prompt
ctrl + u                                        cut everything before the cursor
ctrl + k                                        cut to end of line
ctrl + w                                        delete word before cursor (space delimited)
ctrl + y                                        paste
ctrl + xe                                       continue editing command in editor

fg                                              *fg* brings back program to the foreground
clear                                           *clear* terminal
reset                                           *reset* terminal
column                                          formats input into colummns making it easier to read
cd <directory>                                  *cd* changes directory, can use relative path or full path
    cd -                                        goes to previous directory
    cd ~                                        goes to home directory
pushd <directory>                               *pushd* pushes current directory to a stack and changes directory
popd                                            *popd* pops stack and returns to last directory placed by pushd
echo "VAR is equal to $VAR"                     *echo* 
    -e allows escape characters
    echo -e '\033[1;37mWHITE'
    echo -e '\033[0;30mBLACK'
    echo -e '\033[0;31mRED'
    echo -e '\033[0;34mBLUE'
    echo -e '\033[0;32mGREEN'
cat                                             *cat* output file contents -n for line numbers
tac                                             *tac* output file contents in reverse
mkdir                                           *mkdir*
    -p make parent directories as needed
rm                                              *rm*
    -r recursive -f force -i prompt before each removal
shred                                           *shred* shreds a file so that it is very hard to recover
ls                                              *ls* 
    -a list all entries including those starting by .
    -l long list format (more info)
    -t sort by latest modification
    -s sort by largest file size
    -X sort by file extension
    -d list directories only
    -h human readable format for -s and -l file size
    -r reverse sorting order
awk                                             *awk* loops through all lines of input
    <command> | awk 'OFS=", " {print $1,$2}'    print first and second word of each line $0 is the whole line, $NF is number of fields (last field), OFS sets the output field separator
    awk -F\n <file>                             -F sets the separator
    awk '/^UUID/ {print $0}' /etc/fstab         using regular expressions
    awk -F: 'BEGIN {print "User Accounts\n"; n=0} $1 == "flavien" {print $1,$6; n++} $3 >= 1000 && $1 != "flavien" {print $1; n++} END {print "total: " n "\n"}' /etc/passwd
    BEGIN and END print things before and after looping, different conditions are used to print lines differently, variables can be used
    supports standard programming language features such as printf, if, while, tolower, cos, sqrt, a ? b : c  and many more
sed                                             *sed*
    echo inputstring | sed 's/string/replacement/'      s/ replaces a string
    sed -n -e '1,8p' -e '10-12p' <file>                 select lines 1-8 and 10-12, p is for print, -n prints only selected lines
    sed -n '1~3p' <file>                                print every 3rd line after the first line
    sed -n '/^if/p' <file>                              regular expressions
    sed -n 's/old/new/gip' <file>                       g for global (match more than once per line), i for case sensitive
    sed '/patterm/a text: &' <file>                     a inserts new line beneath pattern, i inserts above, & is the matched text
ln <file_to_link> <link>                        create hard *link*, -s for *symbolic* link *ln*
find <path> -name *.c -exec <command> {} \;     *find*
watch <command>                                 *watch* -d highlights differences -n is interval in seconds
<command> & disown                              *disown* runs comamnd in the background allowing to use the terminal at the same time
