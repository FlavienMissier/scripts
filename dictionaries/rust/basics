*basics*
*String*
let mut s = String::new();                      *let* *mut* *string* create a new mutable variable initialized to an empty string
let mut s = String::from("hello");
s.push_str(", world!"); // push_str() appends a literal to a String

let s1 = String::from("hello");
let s2 = s1;                                    *move* with strings s1 is no longer valid and s2 is instead used to reference the variable;

let s1 = String::from("hello");                 *clone*
let s2 = s1.clone();                            this performs a deep copy

fn calculate_length(s: &String) -> usize {      passing by *reference*
    s.len()
}
let len = function(%s1); // s1 is a String

string *slice* *..*
let s = String::from("hello world");
let hello = &s[0..5];
let world = &s[6..11];
fn first_letter(s: &String) -> &str { s[..0] }  // returning a slice of the first letter

*array* *slice*
let a = [1, 2, 3, 4, 5];
let slice = &a[1..3];


const CONSTANT_VARIABLE: u32 = 5;               *const* constants cannot be set to a value that must be computed at runtime

println!("You guessed: {}", guess);             *print* *print!* *println* *println!*

std::io::stdin().read_line(&mut guess).expect("Failed to read line"); *read* *input*

rand::thread_rng().gen_range(1..101);   *rand* *range* random value 1-100, use 1..=101 to include 101

loop { }                                *loop*
for element in array { }                *for*
for number in (1..4).rev() { }
while number == 0 { }                   *while*

*loop label* used to specify a loop when using break or continue
'counting_up: loop {
    loop {
        break 'counting_up;
        // continue 'counting_up;
    }
}
// loops can return values
let result = loop {
    counter += 1;
    if counter == 10 {
        break counter * 2;
    }
}

match value {                           *match*
    value1 => action,
    value2 => action,
}

*integer* types
i8      u8
i16     u16
i32     u32
i64     u64
i128    u128
isize   usize   based on architecture size

*float* types
f32
f64

*tuple*
let tup = (500, 6.4, 1);
let (x, y, z) = tup;        //getting values
let five_hundred = x.0;     //getting first value

*array*
let a [i32; 5] = [1, 2, 3, 4, 5];    //fixed in size and allocated on the stack, specifying type and length is optional
let a = [3; 5];                      //initializing an array of length 5 containg 3s

*fn* *function*
fn add_two(input: i32) -> i32 {     // -> i32 sets return type
    input + 2                       // statements end with ; expressions don't, this returns a value
}                                   // Last line in a code block returns a value if it doesn't end with a semicolon, return can still be used

let number = if condition { 5 } else { 6 };     // works as long as both return values are the same since rust must know variable types at compile time

*struct*
struct User {
    active: bool,
    username: String,
    email: String,
    sign_in_count: u64,
}
fn main() {
    let mut user1 = User {
        email: String::from("someone@example.com"),
        username: String::from("username"),
        active: true,
        sign_in_count: 1,
    };
    user1.email = String::from("email@example.com");

    let user2 = User {
    email: String::from("another@example.com"),
    ..user1     // get other values from user1
    };          // user1 can no longer be used since a string it held was moved and not copied
}

struct Color(i32, i32, i32); creating a tuple struct without named fields
struct Point(i32, i32, i32);
fn main() {
    let black = Color(0, 0, 0);
    let origin = Point(0, 0, 0);
}

*method*
struct Rectangle {
    width: u32,
    height: u32,
}
impl Rectangle {
    fn area(&self) -> u32 {
        self.width * self.height
    }
}

*debug*
dbg!(&object); // prints object and code line (takes ownership)
