*basics* *branch* *commit* *push* *checkout*
git add .                       *add* changes to the next commit, stages changes
git commit -m ""                creates a commit with the current staged changes
git push [-f]                   push local changes to remote
git checkout <branch/commit>    change current branch to a branch or commit
git branch                      list branches
git branch <name>               *create* a new branch
git push -u origin branchname
git merge <branch/commit>       *merge* changes from commit or branch into current branch
git rebase <branch/commit>      *rebase* the branch history to include the changes from the 
git restore <path/file>         *removes* non-commited changes. *restore*
git stash                       *stash* changes -u stashes untracked changes
	git stash list 		list stashes
	git stash show		show latest stash changes
git log --graph                 *list* commits *log*, --graph shows a *graph*
git diff <commit/branch>        *diff* shows differences
    git diff --no-index --color-words --unified=0 Chapter2.txt EditedChapter2.txt
    Uing diff for files instead of git commits, --unified number of context lines
git status                      *status* Displays paths that have differences between the index file and the current HEAD commit, paths that have differences between the working tree and the index file, and paths in the working tree that are not tracked by Git (and are not ignored by gitignore). The first are what you would commit by running git commit; the second and third are what you could commit by running git add before running git commit.

git revert <commit>             *revert* a commit by creating changes that revert that commit
git reset                       *reset* a branch to a previous commit, this changes the commit history
    git reset --hard            *hard* reset to HEAD, removes all staged and unstaged changes?
